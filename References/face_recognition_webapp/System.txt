Auto-Monitoring System & Reporting Presence for Employee Based AI Face Recognition

Subject or Study Case

saya diminta perusahaan untuk membuat project Auto-monitoring & reporting for employee presence. 
tujuan dibuatnya sistem ini yaitu untuk mengotomatiskan proses pemantauan kehadiran karyawan di berbagai area operasional menggunakan kamera CCTV.
Sistem ini bertujuan untuk melacak dan mencatat kehadiran dan ketidakhadiran karyawan selama jam kerja. 
fungsi yang diharapkan meliputi deteksi real-time karyawan di area yang ditentukan (Face Recognition) dan 
notifikasi saat karyawan tidak berada di area kerja untuk waktu yang lama (misal lebih dari 5 menit). 
Laporan akan dihasilkan secara otomatis dan dikirim melalui WhatsApp ke Supervisor atau staf HR yang relevan. 

berikut detail-detail spesifiknya : 
1. integrasi module AI Face Recognition dengan sistem CCTV yang ada untuk melacak pergerakan kehadiran karyawan : 
    - availability -->> available=masuk/terdeteksi dan off=keluar/tidak terdeteksi.
    - last seen -->> kapan terakhir employee terlihat.
    - tracking location -->> menavigasi keberadaan employee pada lokasi kamera
2. notifikasi real-time yang dikirim melalui WhatsApp ke supervisor jika karyawan keluar dari area yang dipantau lebih dari 5 menit. 
3. Laporan kehadiran harian atau real-time yang dapat diakses oleh HR melalui dashboard pada report page atau WhatsApp. 
4. Penggunaan pengenalan wajah atau pemindaian badge untuk identifikasi karyawan yang akurat (Fitur Manage Employee -->> add/delete employee). 
5. Antarmuka yang sederhana bagi supervisor untuk melacak pola kehadiran (saya pribadi prefer bahasa yang mudah seperti HTML/CSS/JS). 
6. Sistem harus dapat diskalakan untuk mencakup beberapa area sesuai kebutuhan. 

Batasan Teknis : 
1. kamera CCTV harus dipasang dengan jarak optimal 3 meter untuk deteksi yang jelas. 
2. diperlukan integrasi dengan sistem absensi atau ERP yang ada. 
3. regulasi privasi harus diperhatikan saat mengimplementasikan sistem pemantauan ini. 

instruksi tambahan : 
1. test dari rekaman CCTV apakah muka dapat dikenali.
2. web interface compatible dengan logic sistem.
2. buat sistem untuk track berapa lama orang di luar jangkauan kamera dan kapan terakhir dilihat (misal: 6min ago).
3. perlu integrate notifikasi ke hierarki (jelaskan apa itu hierarki, hierarki perlu selesai).

=========================================================================================================

Interaction FLOW System :
[CCTV Cameras] → [Device] → [Face Recognition AI + Tracking] → [Database Update] → [Dashboard Display] → [WhatsApp Notifications]

Live CCTV Feed Panel Flow :
Camera Selection → Stream Acquisition → AI Processing → Display Output

CCTV Camera Switch FLow :
Camera Button Click → Stream Switch → AI Model Reset → New Feed Display → Database Location Update

AI Inference Flow :
Video Frame → Face Recognition → Database Comparison → Employee Identification → Timestamp Recording

Employee Tracking Panel Flow :
Database Query → Employee Status Evaluation (isAvailable, whereCAM, LastSeen) → UI Status Update

Track Location Button Flow :
[Employee Name] → [Camera Location] → [Last Seen Timestamp] → [Track Location Button]
=========================================================================================================

Struktur File Aplikasi Web:

 1. `application.py` - File Utama Aplikasi Web
  Fungsi Utama:
   - Menjadi entry point aplikasi web berbasis Flask
   - Mengatur routing HTTP untuk API endpoints
   - Mengelola koneksi WebSocket untuk streaming real-time
   - Mengkoordinasikan antara komponen-komponen sistem

  Komponen Utama:
   - Flask App: Server web untuk melayani dashboard dan API
   - Socket.IO: Koneksi real-time untuk streaming video
   - Routing API: Endpoint untuk karyawan, kamera, dan status
   - WebSocket Events: Event handler untuk streaming kamera

  2. `AI_module.py` - Modul Pemrosesan AI
  Fungsi Utama:
   - Melakukan inferensi face recognition di background
   - Memproses frame video dari kamera
   - Mengelola tracking wajah dengan ID persisten
   - Memperbarui status karyawan di database

  Komponen Utama:
   - FaceRecognitionSystem: Sistem pengenalan wajah menggunakan InsightFace
   - Background Processing: Thread untuk pemrosesan frame real-time
   - Face Tracking: Sistem tracking dengan ID persisten
   - Employee Status Management: Update status karyawan

  3. `db_manager.py` - Manajer Database
  Fungsi Utama:
   - Mengelola koneksi dan operasi database
   - Mendefinisikan model-model database (ORM)
   - Menyediakan interface untuk operasi CRUD

  Komponen Utama:
   - Database Models: Employee, Attendance, EmployeeStatus, Camera, EmployeeLocation
   - CRUD Operations: Create, Read, Update, Delete data
   - Session Management: Manajemen koneksi database
   - Query Helpers: Fungsi pembantu untuk query kompleks

  4. `camera_manager.py` - Manajer Kamera
  Fungsi Utama:
   - Mengelola koneksi dan streaming kamera
   - Mengatur konfigurasi kamera dari file sistem
   - Menyediakan interface untuk operasi kamera

  Komponen Utama:
   - Camera Streaming: Membuka dan membaca stream dari kamera
   - Configuration Management: Membaca konfigurasi kamera dari folder
   - Stream Management: Mengelola multiple kamera streams
   - Frame Capture: Mengambil frame dari stream kamera

  5. `tracking_manager.py` - Manajer Pelacakan
  Fungsi Utama:
   - Mengelola tracking karyawan dan aktivitas
   - Menyediakan fungsi untuk perhitungan similarity
   - Mengatur sistem alert untuk karyawan yang absen

  Komponen Utama:
   - Employee Tracking: Lacak kehadiran dan lokasi karyawan
   - Similarity Calculation: Hitung similarity antar embeddings
   - Alert System: Sistem notifikasi untuk karyawan yang tidak terdeteksi
   - Activity Monitoring: Monitor aktivitas karyawan

  6. File Static (Frontend)
  Fungsi Utama:
   - Menyediakan antarmuka pengguna berbasis web
   - Menampilkan dashboard real-time
   - Mengelola interaksi pengguna

  Komponen Utama:
   - `index.html`: Halaman utama dashboard
   - `style.css` & `globals.css`: Styling antarmuka
   - JavaScript Files:
     - `dashboard.js`: Kontroler utama dashboard
     - `camera-manager.js`: Manajemen streaming kamera
     - `employee-manager.js`: Manajemen data karyawan
     - `face-recognition.js`: Interface face recognition
     - `utils.js`: Fungsi utilitas umum

  Interaksi Antara Komponen

   1 Frontend (Browser)
   2     ↓ (HTTP/WebSocket)
   3 application.py ←→ AI_module.py
   4     ↓ (Database Operations)
   5 db_manager.py
   6     ↓ (Camera Operations)
   7 camera_manager.py
   8     ↓ (Tracking Logic)
   9 tracking_manager.py

  Alur Kerja Sistem:

   1. Inisialisasi:
      - application.py memulai server Flask dan inisialisasi komponen
      - AI_module.py memuat model face recognition
      - db_manager.py menginisialisasi koneksi database
      - camera_manager.py memuat konfigurasi kamera

   2. Streaming Kamera:
      - Pengguna memulai streaming melalui WebSocket
      - camera_manager.py membuka koneksi ke kamera
      - AI_module.py memproses frame secara real-time
      - Frame dengan bounding box dikirim ke frontend via WebSocket

   3. Face Recognition:
      - AI_module.py mendeteksi wajah dalam frame
      - Wajah dikenali menggunakan InsightFace
      - Bounding box dan label digambar pada frame
      - Status karyawan diperbarui di database

   4. Data Management:
      - db_manager.py menangani semua operasi database
      - tracking_manager.py melacak aktivitas karyawan
      - Data real-time dikirim ke frontend via WebSocket

   5. User Interface:
      - Frontend menampilkan dashboard dengan data real-time
      - Pengguna dapat melihat streaming kamera
      - Status karyawan dan alert ditampilkan
      - Kontrol untuk manajemen karyawan dan kamera

  Fungsi Spesifik Setiap File:

  application.py:
   - @app.route() - Routing HTTP untuk API endpoints
   - @socketio.on() - Event handler WebSocket
   - get_employees() - Mengambil data karyawan dari database
   - get_employee_status() - Mengambil status real-time karyawan
   - get_cameras() - Mengambil konfigurasi kamera

  AI_module.py:
   - FaceRecognitionSystem - Kelas utama untuk pengenalan wajah
   - _process_stream() - Memproses stream kamera di background
   - start_stream() - Memulai streaming face recognition
   - update_employee_status() - Memperbarui status karyawan

  db_manager.py:
   - Employee, Attendance, dll. - Model database
   - get_all_employees() - Mengambil semua data karyawan
   - log_attendance() - Mencatat kehadiran karyawan
   - update_employee_status() - Memperbarui status karyawan

  camera_manager.py:
   - CameraManager - Kelas untuk manajemen kamera
   - get_all_camera_configs() - Mengambil konfigurasi kamera
   - initialize_camera_stream() - Menginisialisasi stream kamera
   - get_frame() - Mengambil frame dari kamera

  tracking_manager.py:
   - TrackingManager - Kelas untuk pelacakan karyawan
   - update_employee_status() - Memperbarui status pelacakan
   - calculate_embedding_similarity() - Menghitung similarity wajah
   - check_absences() - Memeriksa karyawan yang absen

  Sistem ini dirancang dengan arsitektur modular yang memisahkan tanggung jawab setiap komponen, memudahkan maintenance dan
  pengembangan lebih lanjut.

=========================================================================================================

Function web interface 

<...> artinya elemen 

seluruh fungsi di web ini tidak ada rigged, semua fungsi berjalan.

<Header>
* <Real-Time_Datetime> menampilkan waktu sekarang atau real-time
* <button_notification> menampilkan notifikasi dari employee yang keluar atau tidak terdeteksi lebih dari misal 30-60 detik
* <button_settings> configurasi settings

<Panel LIVE CCTV FEED>
* Panel LIVE CCTV Feed diisi dengan frame inferensi face recognition yang sudah dibuat AI Module nya. tinggal pasang (gunakan alamat ip camera_congfigs)
* Indikator AI Inference akan active ketika model face recognation dijalankan, dan berubah offline ketika tidak dijalankan.

<Panel Employee Tracking> 
seluruh employee di database harus terhubung atau berelasi dengan semua function/komponen yang ada di panel ini.
* <employee> diambil dari data karyawan di database yang sudah teregister
* <CAM> adalah tempat karyawan terdeteksi AI (misal <employee:Lee> terdeteksi di camera satu maka elemen <CAM> menjadi <CAM 1>)
* <clock_icon> merupakan durasi waktu terakhir karyawan terlihat di CCTV. 
* <button_track_location> ketika diclick maka akan menavigasi ke alamat protocol CCTV dimana karyawan itu berada. (misal: <employee:Lee> - <CAM1> -->> click button button_track_location -->> navigate or switch to <CAM1>)
* <summary> menampilkan summary dari keseluruhan karyawan (terdeteksi/Present, Alerts/Absent, Total).

<Panel Switch CCTV CAM>
* <1> - <5> ini merupakan button untuk switch camera ke lokasi lain/IP camera lain yang terdaftar di camera_configs